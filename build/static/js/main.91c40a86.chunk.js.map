{"version":3,"sources":["logo.svg","Component/map/map.js","Component/clock/clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapView","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","center","zoom","fov","pitch","bearing","map","MapInit","maptalks","baseLayer","urlTemplate","subdomains","attribution","react_default","a","createElement","id","className","Component","Clock","date","Date","_this2","timerID","setInterval","tick","clearInterval","setState","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","App","handleClick","e","alert","map_map","src","logo","alt","href","target","rel","onClick","clock_clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iTCmEzBC,qBA9DX,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KACRQ,MAAQ,CACTC,OAAQ,EAAE,QAAU,WACpBC,KAAM,GACNC,IAAK,EACLC,MAAO,EACPC,QAAS,GAEbZ,EAAKa,IAAM,KATab,iIAmBxBG,KAAKW,+RAyBLX,KAAKU,IAAM,IAAIE,IAAa,MAAO,CAC/BP,OAAQL,KAAKI,MAAMC,OACnBC,KAAMN,KAAKI,MAAME,KACjBO,UAAW,IAAID,IAAmB,OAAQ,CACtCE,YAAa,4DACbC,WAAY,CAAC,IAAK,IAAK,IAAK,KAC5BC,YAAa,qJAOrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,UAAU,yBA3DdC,cCoCPC,qBArCX,SAAAA,EAAY5B,GAAO,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACf1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAML,KACDS,MAAQ,CAAEoB,KAAM,IAAIC,MAFV5B,mFAKC,IAAA6B,EAAA1B,KAChBA,KAAK2B,QAAUC,YACX,kBAAMF,EAAKG,QACX,kDAKJC,cAAc9B,KAAK2B,wCAInB3B,KAAK+B,SAAS,CACVP,KAAM,IAAIC,wCAKd,OACIR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,wBACHnB,KAAKI,MAAMoB,KAAKQ,cADb,IAEHhC,KAAKI,MAAMoB,KAAKS,WAAa,EAF1B,IAGHjC,KAAKI,MAAMoB,KAAKU,UAHb,QAIHlC,KAAKI,MAAMoB,KAAKW,WAJb,IAKHnC,KAAKI,MAAMoB,KAAKY,aALb,IAMHpC,KAAKI,MAAMoB,KAAKa,sBAhCTf,cCkDLgB,6MA7CbC,YAAc,SAACC,GACbC,MAAM,qIAQN,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAUJ,EAAAC,EAAAC,cAACuB,EAAD,OACzBzB,EAAAC,EAAAC,cAAA,OAAKwB,IAAKC,IAAMvB,UAAU,WAAWwB,IAAI,SACzC5B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,KACEE,UAAU,WACVyB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eADF,WASE/B,EAAAC,EAAAC,cAAA,KACEE,UAAU,WACVyB,KAAK,uBACLC,OAAO,SACPC,IAAI,uBAJN,kBAQA/B,EAAAC,EAAAC,cAAA,OACEE,UAAU,aACV4B,QAASjD,KAAKuC,aAFhB,YAMAtB,EAAAC,EAAAC,cAAC+B,EAAD,gBAtCM5B,aCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91c40a86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport * as maptalks from 'maptalks';\r\nimport '../map/map.css';\r\n\r\nclass MapView extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            center: [-0.113049, 51.498568],\r\n            zoom: 14,\r\n            fov: 0,\r\n            pitch: 0,\r\n            bearing: 0\r\n        };\r\n        this.map = null;\r\n    }\r\n\r\n    //在渲染前调用,在客户端也在服务端。\r\n    componentWillMount() {\r\n\r\n    }\r\n\r\n    // 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异步操作阻塞UI)。\r\n    componentDidMount() {\r\n        this.MapInit();\r\n    }\r\n\r\n    //在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。\r\n    componentWillReceiveProps() {\r\n\r\n    }\r\n    //返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。 可以在你确认不需要更新组件时使用。\r\n    shouldComponentUpdate() {\r\n\r\n    }\r\n    //在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用\r\n    componentWillUpdate() {\r\n\r\n    }\r\n    //在组件完成更新后立即调用。在初始化时不会被调用。\r\n    componentDidUpdate() {\r\n\r\n    }\r\n    //在组件从 DOM 中移除之前立刻被调用。\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    MapInit() {\r\n        this.map = new maptalks.Map('map', {\r\n            center: this.state.center,\r\n            zoom: this.state.zoom,\r\n            baseLayer: new maptalks.TileLayer('base', {\r\n                urlTemplate: 'http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',\r\n                subdomains: ['a', 'b', 'c', 'd'],\r\n                attribution: '&copy; <a href=\"http://osm.org\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/\">CARTO</a>'\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\" className=\"Map-container\"></div>\r\n        )\r\n    }\r\n}\r\nexport default MapView;\r\n","import React, { Component } from 'react';\r\nimport '../clock/clock.css'\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { date: new Date() };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillMount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"clock-div\">\r\n                <h2>Now is &nbsp;\r\n            {this.state.date.getFullYear()}-\r\n            {this.state.date.getMonth() + 1}-\r\n            {this.state.date.getDate()} &nbsp;\r\n            {this.state.date.getHours()}:\r\n            {this.state.date.getMinutes()}:\r\n            {this.state.date.getSeconds()}\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Clock;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MapView from './Component/map/map'\r\nimport Clock from './Component/clock/clock';\r\n\r\nclass App extends Component {\r\n  handleClick = (e) => {\r\n    alert('hello react');\r\n  };\r\n\r\n  componentDidMount() {\r\n    /* eslint-disable no-unused-vars */\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"App-map\"><MapView/></div>\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <div className=\"Bottom-container\">\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Learn React\r\n          </a>&nbsp;&nbsp;\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://maptalks.org\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Learn Maptalks\r\n          </a>\r\n            <div\r\n              className=\"App-button\"\r\n              onClick={this.handleClick}\r\n            >\r\n              Click Me\r\n          </div>\r\n            <Clock />\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}